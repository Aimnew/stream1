import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –†–æ—Å—Å–∏–∏",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏ CSS
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(0deg, #d52b1e 0%, #0039a6 50%, #ffffff 100%);
        padding: 2rem;
        border-radius: 10px;
        margin-bottom: 2rem;
        text-align: center;
        color: white;
        text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
    }
    .metric-card {
        background: white;
        padding: 1rem;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        border-left: 4px solid #0039a6;
        margin: 1rem 0;
    }
    .sidebar .sidebar-content {
        background: linear-gradient(180deg, #f8f9fa 0%, #e9ecef 100%);
    }
    .stSelectbox > div > div {
        background-color: #f8f9fa;
    }
    .warning-box {
        background-color: #fff3cd;
        border: 1px solid #ffeaa7;
        border-radius: 5px;
        padding: 1rem;
        margin: 1rem 0;
    }
    .success-box {
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        border-radius: 5px;
        padding: 1rem;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

@st.cache_data
def load_data(file_path):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        if not Path(file_path).exists():
            st.error(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return pd.DataFrame()
        
        df = pd.read_csv(file_path, encoding='utf-8-sig')
        # –û—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫
        df.columns = df.columns.str.strip()
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {str(e)}")
        return pd.DataFrame()

@st.cache_data
def get_data_summary(df, data_type):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∞–Ω–Ω—ã—Ö"""
    if df.empty:
        return {}
    
    summary = {
        'total_records': len(df),
        'years_range': f"{df['–ì–æ–¥'].min()} - {df['–ì–æ–¥'].max()}" if '–ì–æ–¥' in df.columns else "–ù/–î",
        'subjects_count': len(df['–°—É–±—ä–µ–∫—Ç –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏'].unique()) if '–°—É–±—ä–µ–∫—Ç –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏' in df.columns else 0,
        'data_type': data_type
    }
    return summary

def create_info_cards(summaries):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫"""
    cols = st.columns(len(summaries))
    
    for i, (name, summary) in enumerate(summaries.items()):
        with cols[i]:
            st.markdown(f"""
            <div class="metric-card">
                <h4>{name}</h4>
                <p><strong>–ó–∞–ø–∏—Å–µ–π:</strong> {summary.get('total_records', 0)}</p>
                <p><strong>–ü–µ—Ä–∏–æ–¥:</strong> {summary.get('years_range', '–ù/–î')}</p>
                <p><strong>–°—É–±—ä–µ–∫—Ç–æ–≤:</strong> {summary.get('subjects_count', 0)}</p>
            </div>
            """, unsafe_allow_html=True)

def create_enhanced_plot(df, x, y_cols, plot_type, title, single_year=False):
    """–°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å –æ–±—ã—á–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏"""
    if df.empty or not y_cols:
        return go.Figure().add_annotation(text="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", 
                                        xref="paper", yref="paper", x=0.5, y=0.5)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É Plotly
    colors = px.colors.qualitative.Set3
    
    if plot_type == '–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫':
        fig = go.Figure()
        for i, col in enumerate(y_cols):
            if col in df.columns:
                fig.add_trace(go.Scatter(
                    x=df[x], y=df[col], 
                    name=col, 
                    line=dict(color=colors[i % len(colors)], width=3),
                    hovertemplate=f'<b>{col}</b><br>–ì–æ–¥: %{{x}}<br>–ó–Ω–∞—á–µ–Ω–∏–µ: %{{y:,.0f}}<extra></extra>'
                ))
    
    elif plot_type == '–°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞':
        fig = go.Figure()
        for i, col in enumerate(y_cols):
            if col in df.columns:
                fig.add_trace(go.Bar(
                    x=df[x], y=df[col], 
                    name=col,
                    marker_color=colors[i % len(colors)],
                    hovertemplate=f'<b>{col}</b><br>–ì–æ–¥: %{{x}}<br>–ó–Ω–∞—á–µ–Ω–∏–µ: %{{y:,.0f}}<extra></extra>'
                ))
    
    elif plot_type == '–î–∏–∞–≥—Ä–∞–º–º–∞ —Å –æ–±–ª–∞—Å—Ç—è–º–∏':
        fig = go.Figure()
        for i, col in enumerate(y_cols):
            if col in df.columns:
                fig.add_trace(go.Scatter(
                    x=df[x], y=df[col], 
                    name=col, 
                    fill='tonexty' if i > 0 else 'tozeroy',
                    fillcolor=colors[i % len(colors)],
                    line=dict(color=colors[i % len(colors)]),
                    hovertemplate=f'<b>{col}</b><br>–ì–æ–¥: %{{x}}<br>–ó–Ω–∞—á–µ–Ω–∏–µ: %{{y:,.0f}}<extra></extra>'
                ))
    
    elif plot_type == '–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞' and len(df) == 1:
        values = [df[col].iloc[0] for col in y_cols if col in df.columns]
        fig = go.Figure(data=[go.Pie(
            labels=y_cols, 
            values=values,
            hole=0.3,
            textinfo='label+percent',
            hovertemplate='<b>%{label}</b><br>–ó–Ω–∞—á–µ–Ω–∏–µ: %{value:,.0f}<br>–ü—Ä–æ—Ü–µ–Ω—Ç: %{percent}<extra></extra>'
        )])
    
    else:
        fig = go.Figure()
    
    # –£–ª—É—á—à–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
    fig.update_layout(
        title={
            'text': title,
            'x': 0.5,
            'xanchor': 'center',
            'font': {'size': 20, 'color': '#2c3e50'}
        },
        plot_bgcolor='rgba(0,0,0,0)',
        paper_bgcolor='rgba(0,0,0,0)',
        font=dict(family="Arial, sans-serif", size=12),
        hovermode='x unified',
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1
        )
    )
    
    if not single_year and x in df.columns:
        fig.update_xaxes(
            dtick=1,
            gridcolor='lightgray',
            gridwidth=0.5,
            title_font=dict(size=14)
        )
    
    fig.update_yaxes(
        gridcolor='lightgray',
        gridwidth=0.5,
        title_font=dict(size=14)
    )
    
    return fig

def main():
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    st.markdown("""
    <div class="main-header">
        <h1>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—é –∏ –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç–µ –≤ –†–æ—Å—Å–∏–∏</h1>
        <p>–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö</p>
    </div>
    """, unsafe_allow_html=True)
    
    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –¥–∞–Ω–Ω—ã—Ö
    data_files = {
        "–í—Å–µ–≥–æ": "–í—Å–µ–≥–æ.csv",
        "–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞": "–ó–ü.csv", 
        "–ú—É–∂—á–∏–Ω—ã": "–ú—É–∂—á–∏–Ω—ã.csv",
        "–ñ–µ–Ω—â–∏–Ω—ã": "–ñ–µ–Ω—â–∏–Ω—ã.csv"
    }
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    with st.spinner('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...'):
        data = {}
        summaries = {}
        
        for name, path in data_files.items():
            df = load_data(path)
            data[name] = df
            if not df.empty:
                summaries[name] = get_data_summary(df, name)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
    if all(df.empty for df in data.values()):
        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ CSV —Ñ–∞–π–ª–æ–≤.")
        return
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    st.sidebar.title("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # –í—ã–±–æ—Ä —Å—É–±—ä–µ–∫—Ç–∞
    subjects = []
    for df in data.values():
        if not df.empty and '–°—É–±—ä–µ–∫—Ç –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏' in df.columns:
            subjects.extend(df['–°—É–±—ä–µ–∫—Ç –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏'].unique())
    
    if not subjects:
        st.error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Å—É–±—ä–µ–∫—Ç–∞—Ö –†–§")
        return
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—É–±—ä–µ–∫—Ç—ã, –∏—Å–∫–ª—é—á–∞—è "0" –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    filtered_subjects = sorted([subj for subj in set(subjects) if str(subj) != '0'])
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è "–†–æ—Å—Å–∏–π—Å–∫–∞—è –§–µ–¥–µ—Ä–∞—Ü–∏—è"
    default_index = 0
    if "–†–æ—Å—Å–∏–π—Å–∫–∞—è –§–µ–¥–µ—Ä–∞—Ü–∏—è" in filtered_subjects:
        default_index = filtered_subjects.index("–†–æ—Å—Å–∏–π—Å–∫–∞—è –§–µ–¥–µ—Ä–∞—Ü–∏—è")
    
    subject = st.sidebar.selectbox(
        'üèõÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–±—ä–µ–∫—Ç –†–§',
        filtered_subjects,
        index=default_index
    )
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≥–æ–¥–æ–≤
    all_years = []
    for df in data.values():
        if not df.empty and '–ì–æ–¥' in df.columns:
            all_years.extend(df['–ì–æ–¥'].unique())
    
    if not all_years:
        st.error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –≥–æ–¥–∞—Ö")
        return
    
    min_year, max_year = int(min(all_years)), int(max(all_years))
    
    # –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞
    year_mode = st.sidebar.radio(
        'üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞', 
        ('–û–¥–∏–Ω –≥–æ–¥', '–î–∏–∞–ø–∞–∑–æ–Ω –ª–µ—Ç'), 
        index=1
    )
    
    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—é
    type_mode = st.sidebar.radio(
        'üë• –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞—Å–µ–ª–µ–Ω–∏—è', 
        ('–í—Å–µ–≥–æ', '–ú—É–∂—á–∏–Ω—ã', '–ñ–µ–Ω—â–∏–Ω—ã')
    )
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    base_df = data[type_mode]
    salary_df = data["–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞"]
    
    if base_df.empty:
        st.warning(f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{type_mode}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if year_mode == '–û–¥–∏–Ω –≥–æ–¥':
        selected_year = st.sidebar.slider(
            '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥', min_year, max_year, max_year
        )
        filtered_df = base_df[
            (base_df['–°—É–±—ä–µ–∫—Ç –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏'] == subject) &
            (base_df['–ì–æ–¥'] == selected_year)
        ]
        filtered_salary_df = salary_df[salary_df['–ì–æ–¥'] == selected_year] if not salary_df.empty else pd.DataFrame()
    else:

        
        # –û–¥–∏–Ω —Å–ª–∞–π–¥–µ—Ä —Å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º
        if year_mode == '–î–∏–∞–ø–∞–∑–æ–Ω –ª–µ—Ç':
            st.sidebar.write('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –ª–µ—Ç:')
            
            year_range = st.sidebar.slider(
                "üìÖ –î–∏–∞–ø–∞–∑–æ–Ω –ª–µ—Ç",
                min_value=min_year,
                max_value=max_year,
                value=(min_year, max_year),
                step=1,
                help="–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∫—Ä–∞—è —Å–ª–∞–π–¥–µ—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"
            )
            
            start_year, end_year = year_range
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–Ω–∞ —Å–ª—É—á–∞–π –±–∞–≥–æ–≤ –≤ Streamlit)
            if start_year >= end_year:
                st.sidebar.error("‚ö†Ô∏è –ù–∞—á–∞–ª—å–Ω—ã–π –≥–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–≥–æ!")
                st.stop()
        
        filtered_df = base_df[
            (base_df['–°—É–±—ä–µ–∫—Ç –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏'] == subject) &
            (base_df['–ì–æ–¥'].between(start_year, end_year))
        ]
        filtered_salary_df = salary_df[
            salary_df['–ì–æ–¥'].between(start_year, end_year)
        ] if not salary_df.empty else pd.DataFrame()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    if filtered_df.empty:
        st.markdown("""
        <div class="warning-box">
            <h4>‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</h4>
            <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.</p>
        </div>
        """, unsafe_allow_html=True)
        return
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–¥–Ω–æ–≥–æ –≥–æ–¥–∞ 
    if year_mode == '–û–¥–∏–Ω –≥–æ–¥':
        st.subheader(f"üë• –ù–∞—Å–µ–ª–µ–Ω–∏–µ - {selected_year}")
        if not filtered_df.empty:
            population_display = filtered_df.reset_index(drop=True).iloc[:, 2:]
            st.dataframe(population_display, use_container_width=True)
        
        st.subheader(f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞ - {selected_year}")
        if not filtered_salary_df.empty:
            salary_display = filtered_salary_df.reset_index(drop=True).iloc[:, 1:]
            st.dataframe(salary_display, use_container_width=True)
        else:
            st.info("–î–∞–Ω–Ω—ã–µ –æ –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ–¥–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ª–µ—Ç
    else:
        st.header(f'üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: {subject}')
        
        # –ì—Ä–∞—Ñ–∏–∫ –æ–±—â–µ–π —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞—Å–µ–ª–µ–Ω–∏—è
        if '–í—Å–µ–≥–æ' in filtered_df.columns:
            fig_population = create_enhanced_plot(
                filtered_df, '–ì–æ–¥', ['–í—Å–µ–≥–æ'], 
                '–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫', 
                f'–û–±—â–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏—è –≤ —Ä–µ–≥–∏–æ–Ω–µ {subject}'
            )
            st.plotly_chart(fig_population, use_container_width=True)
        
        # –ì—Ä–∞—Ñ–∏–∫ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –≥—Ä—É–ø–ø–∞–º
        age_group_cols = [
            '–º–æ–ª–æ–∂–µ —Ç—Ä—É–¥–æ—Å–ø–æ—Å–æ–±–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞', 
            '–≤ —Ç—Ä—É–¥–æ—Å–ø–æ—Å–æ–±–Ω–æ–º –≤–æ–∑—Ä–∞—Å—Ç–µ', 
            '—Å—Ç–∞—Ä—à–µ —Ç—Ä—É–¥–æ—Å–ø–æ—Å–æ–±–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞'
        ]
        available_age_cols = [col for col in age_group_cols if col in filtered_df.columns]
        
        if available_age_cols:
            fig_age_groups = create_enhanced_plot(
                filtered_df, '–ì–æ–¥', available_age_cols,
                '–î–∏–∞–≥—Ä–∞–º–º–∞ —Å –æ–±–ª–∞—Å—Ç—è–º–∏',
                '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–∏—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –≥—Ä—É–ø–ø–∞–º'
            )
            st.plotly_chart(fig_age_groups, use_container_width=True)
        
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
        age_columns = ["–¥–æ 1 "] + [str(i) for i in range(1, 101)]
        available_ages = [age for age in age_columns if age in filtered_df.columns]
        
        if available_ages:
            st.subheader("üéØ –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É")
            selected_ages = st.multiselect(
                '–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞',
                available_ages,
                default=['18', '25', '30', '40', '50', '60'] if any(age in available_ages for age in ['18', '25', '30', '40', '50', '60']) else available_ages[:5]
            )
            
            if selected_ages:
                fig_age_dist = create_enhanced_plot(
                    filtered_df, '–ì–æ–¥', selected_ages,
                    '–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫',
                    '–î–∏–Ω–∞–º–∏–∫–∞ —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –≥—Ä—É–ø–ø–∞–º'
                )
                st.plotly_chart(fig_age_dist, use_container_width=True)
        
        # –ê–Ω–∞–ª–∏–∑ –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã
        if not filtered_salary_df.empty:
            st.header('üí∞ –ê–Ω–∞–ª–∏–∑ –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã')
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∑–∞—Ä–ø–ª–∞—Ç—ã
            col1, col2 = st.columns(2)
            
            with col1:
                salary_options = [
                    '–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞',
                    '–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞ –ø–æ –∫–≤–∞—Ä—Ç–∞–ª–∞–º', 
                    '–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞ –ø–æ –º–µ—Å—è—Ü–∞–º'
                ]
                choice = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∞–ª–∏–∑', salary_options)
            
            with col2:
                plot_types = [
                    '–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫', 
                    '–°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞',
                    '–î–∏–∞–≥—Ä–∞–º–º–∞ —Å –æ–±–ª–∞—Å—Ç—è–º–∏'
                ]
                plot_choice = st.selectbox('–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞', plot_types)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∑–∞—Ä–ø–ª–∞—Ç—ã
            if choice == '–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞' and '–í —Å—Ä–µ–¥–Ω–µ–º –∑–∞ –≥–æ–¥' in filtered_salary_df.columns:
                fig_salary = create_enhanced_plot(
                    filtered_salary_df, '–ì–æ–¥', ['–í —Å—Ä–µ–¥–Ω–µ–º –∑–∞ –≥–æ–¥'],
                    plot_choice, '–î–∏–Ω–∞–º–∏–∫–∞ —Å—Ä–µ–¥–Ω–µ–π –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã'
                )
                st.plotly_chart(fig_salary, use_container_width=True)
            
            elif choice == '–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞ –ø–æ –∫–≤–∞—Ä—Ç–∞–ª–∞–º':
                quarters = ['I', 'II', 'III', 'IV']
                available_quarters = [q for q in quarters if q in filtered_salary_df.columns]
                
                if available_quarters:
                    selected_quarters = st.multiselect(
                        '–í—ã–±–µ—Ä–∏—Ç–µ –∫–≤–∞—Ä—Ç–∞–ª—ã', available_quarters, default=available_quarters
                    )
                    
                    if selected_quarters:
                        fig_quarters = create_enhanced_plot(
                            filtered_salary_df, '–ì–æ–¥', selected_quarters,
                            plot_choice, '–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞ –ø–æ –∫–≤–∞—Ä—Ç–∞–ª–∞–º'
                        )
                        st.plotly_chart(fig_quarters, use_container_width=True)
            
            elif choice == '–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞ –ø–æ –º–µ—Å—è—Ü–∞–º':
                months = [
                    '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
                    '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
                ]
                available_months = [m for m in months if m in filtered_salary_df.columns]
                
                if available_months:
                    selected_months = st.multiselect(
                        '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü—ã', available_months, 
                        default=available_months[:6]
                    )
                    
                    if selected_months:
                        fig_months = create_enhanced_plot(
                            filtered_salary_df, '–ì–æ–¥', selected_months,
                            plot_choice, '–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞ –ø–æ –º–µ—Å—è—Ü–∞–º'
                        )
                        st.plotly_chart(fig_months, use_container_width=True)
    
    # –§—É—Ç–µ—Ä
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: #7f8c8d; padding: 1rem;'>
        <p>üìä –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –†–æ—Å—Å–∏–∏</p>
        <p><small>–î–∞–Ω–Ω—ã–µ –≤–∑—è—Ç—ã –ø–æ 2022–≥. ‚Ä¢ –í–µ—Ä—Å–∏—è 2.0</small></p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()